{"version":3,"file":"static/js/134.c7aecc44.chunk.js","mappings":"sNACA,EAAuB,yBAAvB,EAAwD,0BAAxD,EAA0F,0BAA1F,EAA0H,wB,4BCKpHA,EAAgB,CAElBC,MAAO,GACPC,SAAU,IA6Dd,EA1DkB,SAAHC,GAAoB,IAAfC,EAAQD,EAARC,SAEhBC,GAA0BC,EAAAA,EAAAA,WAAQC,EAAAA,EAAAA,GAAC,CAAC,EAAIP,IAAgBQ,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAAjDK,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAEhBI,EAAe,SAAHC,GAAoB,IAAdC,EAAMD,EAANC,OACZC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,MACdL,GAAQJ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIG,GAAK,IAAAO,EAAAA,EAAAA,GAAA,GAAGF,EAAOC,IAE/B,EAUEE,GAAUC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAQ,GAAE,IAClCC,GAAaF,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAQ,GAAE,IACnCnB,EAAmBS,EAAnBT,MAAQC,EAAWQ,EAAXR,SAChB,OACEoB,EAAAA,EAAAA,MAAA,QAAMlB,SAZiB,SAAAmB,GACnBA,EAAEC,iBACFpB,GAAQG,EAAAA,EAAAA,GAAC,CAAC,EAAIG,GAGhB,EAO4Be,UAAWC,EAASC,SAAA,EAChDC,EAAAA,EAAAA,KAAA,MAAIH,UAAWC,EAAUC,SAAC,gBACtBL,EAAAA,EAAAA,MAAA,OAAAK,SAAA,EACFC,EAAAA,EAAAA,KAAA,SAAOC,QAASX,EAAQS,SAAC,YACzBC,EAAAA,EAAAA,KAAA,SACEZ,MAAOf,EACP6B,SAAUlB,EACVa,UAAWC,EACXK,GAAIb,EACJc,KAAK,QACLjB,KAAK,QACLkB,UAAQ,EACRC,YAAY,yBAGhBZ,EAAAA,EAAAA,MAAA,OAAAK,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOC,QAASR,EAAWM,SAAC,eAC5BC,EAAAA,EAAAA,KAAA,SACEZ,MAAOd,EACP4B,SAAUlB,EACVa,UAAWC,EACXK,GAAIV,EACJW,KAAK,WACLjB,KAAK,WACLkB,UAAQ,EACRC,YAAY,4BAIhBN,EAAAA,EAAAA,KAAA,UAAQH,UAAWC,EAASM,KAAK,SAAQL,SAAC,YAKhD,ECnEA,EAAwB,0B,4DC8CvB,EAhCkB,WACf,IAAMQ,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAC1BC,GAAUF,EAAAA,EAAAA,IAAYG,EAAAA,IACtBC,GAAUJ,EAAAA,EAAAA,IAAYK,EAAAA,IACtBC,GAAWC,EAAAA,EAAAA,MAejB,OAXAC,EAAAA,EAAAA,YAAU,WACJJ,GACFK,EAAAA,GAAAA,QAAc,6CAGZP,GACFO,EAAAA,GAAAA,MAAY,0CAEhB,GAAG,CAACL,EAASF,IAGTE,GACKZ,EAAAA,EAAAA,KAACkB,EAAAA,GAAQ,CAACC,GAAG,cAGpBzB,EAAAA,EAAAA,MAAA0B,EAAAA,SAAA,CAAArB,SAAA,EACAC,EAAAA,EAAAA,KAACqB,EAAS,CAAC7C,SAnBK,SAAA8C,GAChBR,GAASS,EAAAA,EAAAA,IAAMD,GACjB,IAmBGZ,IAAWV,EAAAA,EAAAA,KAAA,MAAIH,UAAWC,EAAUC,SAAEW,IACpCH,IAAaP,EAAAA,EAAAA,KAACwB,EAAAA,EAAM,IAAW,MAGrC,C,uDC7CM,IAAMC,EACX,mECmBSjC,EAAS,WAGlB,IAHiC,IAAdkC,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACtBxB,EAAK,GACL2B,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWP,IAC3CA,KACLvB,GAAMsB,EAA0B,GAAdK,EAAMJ,IAE1B,OAAOvB,CACT,C","sources":["webpack://react-homework-template/./src/components/LogimForm/login-form.module.css?e7d9","components/LogimForm/LoginForm.jsx","webpack://react-homework-template/./src/pages/LoginPage/login-page.module.css?8795","pages/LoginPage/LoginPage.jsx","../node_modules/nanoid/url-alphabet/index.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"login-form_form__mwLnM\",\"titel\":\"login-form_titel__Df8te\",\"input\":\"login-form_input__RoJvO\",\"btn\":\"login-form_btn__AWjsj\"};","import css from \"./login-form.module.css\"\nimport { useState } from 'react';\nimport { useMemo } from 'react';\nimport { nanoid } from 'nanoid';\n\n\nconst INITIAL_STATE = {\n   \n    email: '',\n    password: '',\n  };\n\nconst LoginForm = ({onSubmit}) => {\n\n    const [state, setState] = useState({ ...INITIAL_STATE });\n\n    const handelChange = ({ target }) => {\n        const { name, value } = target;\n        setState({ ...state, [name]: value });\n        \n      };\n\n      const handelSubmit = e => {\n        e.preventDefault();\n        onSubmit({ ...state });\n\n        \n      };\n\n \n  const emailId = useMemo(() => nanoid(), []);\n  const passwordId = useMemo(() => nanoid(), []);\n  const { email , password}= state;\n  return (\n    <form onSubmit={handelSubmit} className={css.form}>\n      <h1 className={css.titel}>Form Login</h1>\n          <div>\n        <label htmlFor={emailId}>Email </label>\n        <input\n          value={email}\n          onChange={handelChange}\n          className={css.input}\n          id={emailId}\n          type=\"email\"\n          name=\"email\"\n          required\n          placeholder=\"Enter you Email \"\n        ></input>\n      </div>\n      <div>\n        <label htmlFor={passwordId}>Password </label>\n        <input\n          value={password}\n          onChange={handelChange}\n          className={css.input}\n          id={passwordId}\n          type=\"password\"\n          name=\"password\"\n          required\n          placeholder=\"Enter you password \"\n        ></input>\n      </div>\n      \n      <button className={css.btn} type=\"submit\">\n        Login\n      </button>\n    </form>\n  );\n};\n\nexport default LoginForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"login-page_error__9rD7T\"};","import LoginForm from \"components/LogimForm/LoginForm\";\nimport css from \"./login-page.module.css\"\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login } from '../../redux/auth/auth-operation';\nimport {\n  selectAuthError,\n  selectAuthIsLoading,\n  selectAuthIsLogin,\n} from '../../redux/auth/auth-selectors';\nimport Loader from 'components/Loader/Loader';\n\nimport { Navigate } from 'react-router-dom';\nimport {  toast } from 'react-toastify';\nimport { useEffect } from 'react';\n\n const LoginPage = ()=>{\n    const isLoading = useSelector(selectAuthIsLoading);\n  const isError = useSelector(selectAuthError);\n  const isLogin = useSelector(selectAuthIsLogin);\n  const dispatch = useDispatch();\n  const handLogin = data => {\n    dispatch(login(data));\n  };\n  useEffect(() => {\n    if (isLogin) {\n      toast.success('Congratulations on your successful Login!');\n    }\n\n    if (isError) {\n      toast.error('An error has occurred. Check your email');\n    }\n  }, [isLogin, isError]);\n\n\n  if (isLogin) {  \n    return <Navigate to=\"/contact\" />;\n  }\n    return (  \n    <>\n    <LoginForm onSubmit={handLogin}  \n    />\n    {isError && <h3 className={css.error}>{isError}</h3>}\n      {isLoading && <Loader></Loader>};\n    </>)\n    \n }\n\n export default LoginPage;","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += urlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n"],"names":["INITIAL_STATE","email","password","_ref","onSubmit","_useState","useState","_objectSpread","_useState2","_slicedToArray","state","setState","handelChange","_ref2","target","name","value","_defineProperty","emailId","useMemo","nanoid","passwordId","_jsxs","e","preventDefault","className","css","children","_jsx","htmlFor","onChange","id","type","required","placeholder","isLoading","useSelector","selectAuthIsLoading","isError","selectAuthError","isLogin","selectAuthIsLogin","dispatch","useDispatch","useEffect","toast","Navigate","to","_Fragment","LoginForm","data","login","Loader","urlAlphabet","size","arguments","length","undefined","bytes","crypto","getRandomValues","Uint8Array"],"sourceRoot":""}