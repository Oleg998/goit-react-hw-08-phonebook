{"version":3,"file":"static/js/809.d5aac78b.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/MyPhone/PhoneForm/PhoneForm.module.css?3a43","redux/contacts/contacts-selectors.js","redux/filter/filter-selectors.js","components/MyPhone/PhoneForm/PhoneForm.jsx","webpack://react-homework-template/./src/components/MyPhone/PhoneList/PhoneList.module.css?1ebd","components/MyPhone/PhoneList/PhoneList.jsx","pages/ContactPage/ContactPage.jsx","../node_modules/nanoid/url-alphabet/index.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"PhoneForm_form__5+t+G\",\"titel\":\"PhoneForm_titel__bPYbk\",\"input\":\"PhoneForm_input__vatD3\",\"btn\":\"PhoneForm_btn__VfQW2\",\"selectedButton\":\"PhoneForm_selectedButton__upSrG\",\"spin\":\"PhoneForm_spin__ki-fM\"};","import { createSelector } from \"@reduxjs/toolkit\";\nimport { selectFilter } from \"../filter/filter-selectors\";\n\nexport const selectAllContact = store => store.contacts.items;\n\nexport const selectorRequestStutus=state=>state.contacts.requestStutus\n\n\nexport const selectContact = state =>state.contacts\n\nexport const selectFilterContact = createSelector([selectAllContact , selectFilter],(contacts , filter) => {\n  if (!filter) {\n    return contacts;\n  }\n  const normalizedFilter = filter.toLocaleLowerCase();\n  return contacts.filter(({ name }) =>\n  name.toLocaleLowerCase().includes(normalizedFilter))\n})\n","export const selectFilter = store => store.filter;\n\n","import { useEffect, useMemo } from 'react';\nimport { nanoid } from 'nanoid';\nimport css from './PhoneForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { addContacts } from '../../../redux/contacts/contacts-operation';\nimport { selectContact,selectorRequestStutus } from \"../../../redux/contacts/contacts-selectors\"\nimport { toast } from 'react-toastify';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\n\nconst PhoneForm = () => {\n  const [state, setState] = useState({ ...INITIAL_STATE });\n  const {isLoading}=useSelector(selectContact);\n  const dispatch = useDispatch();\n  const status= useSelector(selectorRequestStutus) \n\n  useEffect(()=>{\n    if(status===\"addRejected\") \n    {toast.error('Contact not added to Phonebook')}\n  },[status])\n\n  useEffect(()=>{\n    if(status===\"addFlfilled\"){toast.success(\"Success contact add to phonebook\")}\n  },[status]);\n\n  useEffect (()=>{\n    \n    if (status===\"addFlfilled\"){setState({ ...INITIAL_STATE })}\n  },[status])\n\n\n\n  const addForPhenebook = data => {\n    dispatch(addContacts(data));\n  };\n\n  const nameId = useMemo(() => nanoid(), []);\n  const numbId = useMemo(() => nanoid(), []);\n\n  const handelChange = ({ target }) => {\n    const { name, value } = target;\n    setState({ ...state, [name]: value });\n  };\n\n  const handelSubmit = e => {\n    e.preventDefault();\n    addForPhenebook({ ...state });\n   \n  };\n  const { name, number } = state;\n  return (\n    <form onSubmit={handelSubmit} className={css.form}>\n      <h1 className={css.titel}>Phonebook</h1>\n      <div>\n        <label htmlFor={nameId}>Name</label>\n        <input\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\\\\\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          value={name}\n          onChange={handelChange}\n          className={css.input}\n          id={nameId}\n          type=\"text\"\n          name=\"name\"\n          required\n          placeholder=\"Enter you name \"\n        ></input>\n      </div>\n\n      <div>\n        <label htmlFor={numbId}>Number </label>\n        <input\n          pattern=\"(\\+?\\d{1,4}[ \\-]?)?(\\(?\\d{1,3}\\)?[ \\-]?)?\\d{1,4}[ \\-]?\\d{1,4}[ \\-]?\\d{1,9}\"\n          title=\"Enter the correct phone number\"\n          value={number}\n          onChange={handelChange}\n          className={css.input}\n          id={numbId}\n          type=\"tel\"\n          name=\"number\"\n          required\n          placeholder=\"Enter you number \"\n        ></input>\n      </div>\n      <button className={`${css.btn} ${\n            isLoading  ? css.selectedButton : ''\n          }`} type=\"submit\">\n      {isLoading  ? 'Loading...' : 'Add contact'}\n      </button>\n    </form>\n  );\n};\n\nexport default PhoneForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"PhoneList_wrapper__PaNIX\",\"phone_list\":\"PhoneList_phone_list__JWDCC\",\"button\":\"PhoneList_button__S3O8w\",\"selectedButton\":\"PhoneList_selectedButton__EId+B\",\"spin\":\"PhoneList_spin__Nd+wt\",\"error_mesager\":\"PhoneList_error_mesager__7L92N\"};","import { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from '../../../redux/filter/filter-slice';\nimport {\n  selectContact,\n  selectorRequestStutus,\n  selectFilterContact,\n\n} from '../../../redux/contacts/contacts-selectors';\nimport {\n  fetchContacts,\n  deleteContacts,\n} from '../../../redux/contacts/contacts-operation';\nimport css from './PhoneList.module.css';\nimport { toast } from 'react-toastify';\n\nconst PhoneList = () => {\n  const [selectedButtonId, setSelectedButtonId] = useState(null);\n\n  const status= useSelector(selectorRequestStutus)\n  const dispatch = useDispatch();\n  const {  error  } = useSelector(selectContact);\n  const items = useSelector(selectFilterContact);\n\n  useEffect(() => {\n    setSelectedButtonId(null);    \n    dispatch(fetchContacts());\n  }, [dispatch,selectedButtonId ]);\n\n  useEffect(()=>{\n    if (status===\"deleteRejected\") {toast.error('Contact not deleted')} \n  },[status]);\n\n  useEffect(()=>{\n    if(status===\"deleteFulfilled\"){toast.success(\"Contact deleted successfully\")}\n  },[status]);\n\n  const deleteName = id => {\n    dispatch(deleteContacts(id));\n    setSelectedButtonId(id);\n  };\n\n   const handelSearce = ({ target }) => dispatch(setFilter(target.value));\n\n  const elements = items.map(({ id, name, number }) => {\n    return (\n      <li key={id} className={css.items}>\n        {name} :{number}\n        <button\n          onClick={() => deleteName(id)}\n          type=\"button\"\n          className={`${css.button} ${\n            selectedButtonId === id ? css.selectedButton : ''\n          }`}\n        >\n          {selectedButtonId === id ? 'Loading...' : 'Delete'}\n        </button>\n      </li>\n    );\n  });\n\n  return (\n    <>\n      <div className={css.wrapper}>\n        <h2>Contacts</h2>\n        <p> Find Cotacts by Name</p>\n        <input\n          name=\"filter\"\n          onChange={handelSearce}\n          placeholder=\"Searce Name\"\n        ></input>\n        <ul className={css.phone_list}>{elements}</ul>\n        {!items.length && <h2>No phone in Phonebook</h2>}\n        {error && <p className={css.error_mesager}>......{error}......</p>}\n      </div>\n    </>\n  );\n};\n\nexport default PhoneList;\n","import PhoneForm from \"components/MyPhone/PhoneForm/PhoneForm\"\nimport PhoneList from \"components/MyPhone/PhoneList/PhoneList\"\nconst ContactsPage = () =>{\n    return (\n    <>\n    <PhoneForm />\n      <PhoneList />\n      </>\n    )\n}\n\nexport default ContactsPage","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += urlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n"],"names":["selectorRequestStutus","state","contacts","requestStutus","selectContact","selectFilterContact","createSelector","store","items","filter","normalizedFilter","toLocaleLowerCase","_ref","name","includes","INITIAL_STATE","number","_useState","useState","_objectSpread","_useState2","_slicedToArray","setState","isLoading","useSelector","dispatch","useDispatch","status","useEffect","toast","nameId","useMemo","nanoid","numbId","handelChange","target","value","_defineProperty","_jsxs","onSubmit","e","data","preventDefault","addContacts","className","css","children","_jsx","htmlFor","pattern","onChange","id","type","required","placeholder","title","concat","selectedButtonId","setSelectedButtonId","error","fetchContacts","elements","map","_ref2","onClick","deleteContacts","deleteName","_Fragment","setFilter","length","PhoneForm","PhoneList","urlAlphabet","size","arguments","undefined","bytes","crypto","getRandomValues","Uint8Array"],"sourceRoot":""}